const getElem=e=>document.querySelector(`[fd-custom-code="${e}"]`),hide=e=>e.style.display="none",showElementGrid=e=>e.style.display="grid";let lastClickedButton;const setTriggerButtonAttribute=e=>e.setAttribute("fs-formsubmit-element","ix-trigger"),removeTriggerAttribute=e=>e.removeAttribute("fs-formsubmit-element"),gptResponseNode=getElem("gpt-response-text"),shouldGeneratePrompt=e=>{let t=!0;for(const n of Object.values(e))if(n.required&&!n.value){t=!1;break}return t},showAndScrollToElement=e=>{showElementGrid(e),window.scrollBy(0,400)},getPrompt=(e,n)=>{let o="";return Object.entries(e).forEach(e=>{var[e,t]=e;n[e].value&&(t=t(n[e].value),o=o.concat(t))}),o},formPopup=getElem("gpt-form-wrapper"),getCookieExpirationDate=(formPopup.style.display="none",()=>{var e=new Date;return e.setDate(e.getDate()+2),e.toUTCString()}),saveTodayInCookie=()=>{var e=new Date;document.cookie=`tw-popup=${e.toUTCString()}; expires=${getCookieExpirationDate()}; path=/`},hasAlreadySubmittedForm=()=>{var e=document.cookie.split(";").find(e=>e.trim().startsWith("tw-popup="));return!!e&&(e=new Date(e.split("=")[1]),new Date-e<=864e6)},onSuccessSubmission=()=>{console.log("Form submitted successfully"),saveTodayInCookie(),formPopup.style.display="none",console.log("last button clicked ",lastClickedButton),lastClickedButton&&lastClickedButton.click()},onSuccessSubmissionBtn=getElem("on-success-submit"),makeRequestToChatGPT=(onSuccessSubmissionBtn.addEventListener("click",onSuccessSubmission),async e=>{e={method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer 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"},body:JSON.stringify({prompt:e,temperature:.2,max_tokens:4e3,n:1})},e=(await(await fetch("https://api.openai.com/v1/engines/text-davinci-003/completions",e)).json()).choices[0].text.trim().split("\n\n");const n=document.createElement("div");return e.forEach(e=>{var t=document.createElement("p");t.textContent=e,n.appendChild(t)}),n}),setPromptText=(e,t)=>{e.innerText="",e.innerText=t},generatePrompt=(t,n,o="")=>{if(shouldGeneratePrompt(n)){let e=getPrompt(t,n);return e=o?e.concat(o):e}return""},allResponsesButton=document.querySelectorAll("[fd-custom-button='generate-response']"),tabSelectors=(allResponsesButton.forEach(removeTriggerAttribute),document.querySelectorAll("[fd-custom-code='tab-selector']")),gptResponseWrapper=getElem("prompt-wrapper"),SEOMetaTitle=(hide(gptResponseWrapper),tabSelectors.forEach(e=>{e.addEventListener("click",e=>{allResponsesButton.forEach(removeTriggerAttribute),hide(gptResponseWrapper)})}),()=>{const a=getElem("smt-prompt-text"),n=(a.innerHTML="",getElem("smt-generate-response")),r={pageType:e=>`Come up with a compelling SEO Meta title for my ecommerce ${e}.`,pageTitle:e=>` The title of the page ${d.pageType.value} is ${e}.`,maxCharacterCount:e=>` The meta title should be under ${e}.`,brandName:e=>"",tone:e=>" The tone should be "+e,targetKeyword:e=>`, and my target keyword is ${e}.`},d={pageType:{value:"",required:!0},pageTitle:{value:"",required:!1},maxCharacterCount:{value:"",requred:!1},brandName:{value:"",required:!0},tone:{value:"",required:!1},targetKeyword:{value:"",required:!1}};[{name:"pageType",eventType:"change",node:getElem("smt-page-type")},{name:"pageTitle",eventType:"input",node:getElem("smt-page-title")},{name:"maxCharacterCount",eventType:"input",node:getElem("smt-max-character")},{name:"brandName",eventType:"input",node:getElem("smt-brand-name")},{name:"tone",eventType:"change",node:getElem("smt-tone")},{name:"targetKeyword",eventType:"input",node:getElem("smt-target-keyword")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})}),adCopy=()=>{const n=getElem("ac-generate-response"),a={brandName:e=>"Help me come up with some copy for my online ad. My ecommerce brand is called "+e,brandNiche:e=>` And we're in the the ${e} space.`,productName:e=>` My product is called ${e}.`,adComponent:e=>" The copy is for "+e,adType:e=>` of a ${e}.`,keyFeatures:e=>" The key features I’d like to callout are "+e,keyBenefits:e=>` and the key benefits I’d like to callout are ${e}.`,desiredTone:e=>" The tone should be "+e,buyerMotive:e=>` , and the ad should appeal to the ${e} buyer motive. `,offer:e=>` The offer is a ${e} offer.`,desiredWordCount:e=>` The ad copy shoud be around ${e} words.`},r=getElem("ac-prompt-text"),d={brandName:{value:r.innerHTML="",required:!0},brandNiche:{value:"",required:!1},productName:{value:"",requred:!1},adComponent:{value:"",required:!0},adType:{value:"",required:!0},keyFeatures:{value:"",required:!1},keyBenefits:{value:"",required:!1},desiredTone:{value:"",required:!0},buyerMotive:{value:"",required:!1},offer:{value:"",required:!1},desiredWordCount:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("ac-brand-name")},{name:"brandNiche",eventType:"change",node:getElem("ac-brand-niche")},{name:"productName",eventType:"input",node:getElem("ac-product-name")},{name:"adComponent",eventType:"change",node:getElem("ac-ad-component")},{name:"adType",eventType:"change",node:getElem("ac-ad-type")},{name:"keyFeatures",eventType:"input",node:getElem("ac-key-features")},{name:"keyBenefits",eventType:"input",node:getElem("ac-key-benefits")},{name:"desiredTone",eventType:"change",node:getElem("ac-tone")},{name:"buyerMotive",eventType:"change",node:getElem("ac-buyer-motive")},{name:"offer",eventType:"change",node:getElem("ac-offer")},{name:"desiredWordCount",eventType:"input",node:getElem("ac-word-count")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(a,d);e?setPromptText(r,e):setPromptText(r,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(a,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},blogCopy=()=>{const n=getElem("bc-generate-response"),a=getElem("bc-prompt-text"),r=(a.innerHTML="",{brandName:e=>"",blogTitle:e=>"I need help writing a section of a blog post. The title of the blog post is "+e,sectionHeader:e=>`, and the title of the section header is ${e}.`,targetKeyword:e=>` The keyword I’m targeting is ${e}.`,secondaryKeywords:e=>` The secondary keywords I am targeting are ${e}.`,tone:e=>"The tone of the post should be "+e,wordCount:e=>`The word count should be around ${e} words`,numOfExamples:e=>`, and I’d like to cite at least ${e} examples.`}),d={brandName:{value:"",required:!1},blogTitle:{value:"",required:!0},targetKeyword:{value:"",required:!1},secondaryKeywords:{value:"",required:!1},sectionHeader:{value:"",required:!0},tone:{value:"",required:!1},numOfExamples:{value:"",required:!1},wordCount:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("bc-brand-name")},{name:"blogTitle",eventType:"input",node:getElem("bc-blog-title")},{name:"targetKeyword",eventType:"input",node:getElem("bc-target-keyword")},{name:"secondaryKeywords",eventType:"input",node:getElem("bc-secondary-keywords")},{name:"sectionHeader",eventType:"input",node:getElem("bc-section-header")},{name:"sectionHeader",eventType:"input",node:getElem("bc-section-header")},{name:"tone",eventType:"input",node:getElem("bc-tone")},{name:"tone",eventType:"input",node:getElem("bc-tone")},{name:"numOfExamples",eventType:"change",node:getElem("bc-number-of-examples")},{name:"numOfExamples",eventType:"change",node:getElem("bc-number-of-examples")},{name:"wordCount",eventType:"change",node:getElem("bc-words-count")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},blogOutline=()=>{const n=getElem("bo-generate-response"),a=getElem("bo-prompt-text"),r=(a.innerHTML="",{brandName:e=>"Give me a structural outline for my blog post. My ecommerce brand’s name is "+e,brandNiche:e=>", and we’re in the "+e,blogTitle:e=>" The title of the blog post should be "+e,blogType:e=>", and it should be in the format of a "+e,targetKeyword:e=>`The keyword I’m targeting is ${e}.`,secondaryKeywords:e=>" The secondary keywords I am targeting are "+e,subHeaders:e=>" , and I’d like to include the following subheaders: "+e,tone:e=>" The tone of the post should be "+e,productCallout:e=>", and at least one section should call out my product, "+e}),d={brandName:{value:"",required:!0},brandNiche:{value:"",required:!1},blogTitle:{value:"",required:!1},targetKeyword:{value:"",required:!1},secondaryKeywords:{value:"",required:!1},subHeaders:{value:"",required:!1},blogType:{value:"",required:!1},tone:{value:"",required:!1},productCallout:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("bo-brand-name")},{name:"brandNiche",eventType:"change",node:getElem("bo-brand-niche")},{name:"blogTitle",eventType:"input",node:getElem("bo-blog-title")},{name:"targetKeyword",eventType:"input",node:getElem("bo-target-keyword")},{name:"secondaryKeywords",eventType:"input",node:getElem("bo-secondary-keywords")},{name:"subHeaders",eventType:"input",node:getElem("bo-sub-headers")},{name:"blogType",eventType:"change",node:getElem("bo-blog-type")},{name:"tone",eventType:"change",node:getElem("bo-tone")},{name:"productCallout",eventType:"input",node:getElem("bo-product-callout")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},seoMetaDescription=()=>{const n=getElem("smd-generate-response"),a=getElem("smd-prompt-text"),r={pageType:e=>"Come up with a compelling SEO meta description for my ecommerce "+e,pageTitle:e=>` The title of the ${d.pageType.value} is `+e,maxCharCount:e=>" The meta description should be under "+e,callToAction:e=>", and should include the following call to action: "+e,tone:e=>" The tone should be "+e,targetKeyword:e=>", and my target keyword is "+e,pageHeader:e=>""},d={brandName:{value:"",required:!0},pageHeader:{value:"",required:!1},pageType:{value:"",required:!0},tone:{value:"",required:!1},targetKeyword:{value:"",required:!1},maxCharCount:{value:"",required:!1},callToAction:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("smd-brand-name")},{name:"pageHeader",eventType:"input",node:getElem("smd-page-header")},{name:"pageType",eventType:"change",node:getElem("smd-page-type")},{name:"tone",eventType:"change",node:getElem("smd-tone")},{name:"targetKeyword",eventType:"input",node:getElem("smd-target-keyword")},{name:"maxCharCount",eventType:"input",node:getElem("smd-max-char-count")},{name:"callToAction",eventType:"change",node:getElem("smd-cta")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},emailSubjectLine=()=>{const n=getElem("esl-generate-response"),a=getElem("esl-prompt-text"),r=(a.innerHTML="",{brandName:e=>"Craft a clear, engaging email subject line for my ecommerce brand, "+e,productName:e=>` The product I’m promoting is ${e}.`,buyerMotive:e=>`I’d like to appeal to the ${e} buyer motive`,offer:e=>` The offer is a ${e} offer`,tone:e=>" The tone should be "+e,maxCharCount:e=>` Maximum character count should be ${e}.`}),d={brandName:{value:"",required:!0},productName:{value:"",required:!1},buyerMotive:{value:"",required:!1},offer:{value:"",required:!1},tone:{value:"",required:!1},maxCharCount:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("esl-brand-name")},{name:"productName",eventType:"input",node:getElem("esl-product-name")},{name:"buyerMotive",eventType:"change",node:getElem("esl-buyer-motive")},{name:"offer",eventType:"change",node:getElem("esl-offer")},{name:"tone",eventType:"change",node:getElem("esl-tone")},{name:"maxCharCount",eventType:"input",node:getElem("esl-max-char-count")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},emailCopy=()=>{const n=getElem("ec-generate-response"),a=getElem("ec-prompt-text"),r=(a.innerHTML="",{brandName:e=>`Craft some clear, compelling email copy for my ecommerce brand, ${e}, that maximizes engagement.`,productName:e=>" The product I’m promoting is "+e,contentPromoting:e=>"The content I’m promoting is "+e,subjectLine:e=>" The subject line is "+e,buyerMotive:e=>` I’d like to appeal to the ${e} buyer motive.`,offer:e=>` The offer is a ${e} offer.`,tone:e=>` The tone should be ${e}.`,wordCount:e=>` My desired word count is ${e}.`,cta:e=>" My desired call-to-action is "+e}),d={brandName:{value:"",required:!0},subjectLine:{value:"",required:!1},productName:{value:"",required:!0},contentPromoting:{value:"",required:!1},buyerMotive:{value:"",required:!1},offer:{value:"",required:!1},tone:{value:"",required:!1},wordCount:{value:"",required:!1},cta:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("ec-brand-name")},{name:"subjectLine",eventType:"input",node:getElem("ec-subject-line")},{name:"productName",eventType:"input",node:getElem("ec-product-name")},{name:"contentPromoting",eventType:"input",node:getElem("ec-content-promoting")},{name:"buyerMotive",eventType:"change",node:getElem("ec-buyer-motive")},{name:"offer",eventType:"change",node:getElem("ec-offer")},{name:"tone",eventType:"tone",node:getElem("ec-tone")},{name:"wordCount",eventType:"input",node:getElem("ec-word-count")},{name:"cta",eventType:"change",node:getElem("ec-cta")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},smsCopy=()=>{const n=getElem("sc-generate-response"),a=getElem("sc-prompt-text"),r=(a.innerHTML="",{brandName:e=>`Craft some clear, compelling SMS copy for my ecommerce brand, ${e}, that maximizes engagement.`,productName:e=>" The product I’m promoting is "+e,buyerMotive:e=>`  I’d like to appeal to the ${e} buyer motive.`,offer:e=>` The offer is a ${e} offer.`,tone:e=>` The tone should be ${e}. `,wordCount:e=>` My desired word count is ${e}.`,cta:e=>` My desired call-to-action is ${e}.`}),d={brandName:{value:"",required:!0},productName:{value:"",required:!1},buyerMotive:{value:"",required:!1},offer:{value:"",required:!1},tone:{value:"",required:!1},wordCount:{value:"",required:!1},cta:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("sc-brand-name")},{name:"productName",eventType:"input",node:getElem("sc-product-name")},{name:"buyerMotive",eventType:"change",node:getElem("sc-buyer-motive")},{name:"offer",eventType:"change",node:getElem("sc-offer")},{name:"tone",eventType:"change",node:getElem("sc-tone")},{name:"wordCount",eventType:"input",node:getElem("sc-word-count")},{name:"cta",eventType:"change",node:getElem("sc-cta")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},productDescription=()=>{const n=getElem("pd-generate-response"),a=getElem("pd-prompt-text"),r=(a.innerHTML="",{productName:e=>`Write me an engaging and compelling product description highlighting the key features of my ecommerce product: ${e}.`,brandName:e=>`. My brand name is ${e}.`,buyerMotive:e=>` I’d like to appeal to the ${e} buyer motive.`,keyFeatures:e=>` The key features I’d like to call out are: ${e}.`,keyBenefits:e=>"  The key benefits I’d like to call out are: "+e,tone:e=>` The tone should be ${e}.`,wordCount:e=>`  My desired word count is ${e}.`,offer:e=>""}),d={productName:{value:"",required:!0},brandName:{value:"",required:!0},buyerMotive:{value:"",required:!1},keyFeatures:{value:"",required:!1},keyBenefits:{value:"",required:!1},tone:{value:"",required:!1},wordCount:{value:"",required:!1},offer:{value:"",required:!1}};[{name:"productName",eventType:"input",node:getElem("pd-product-name")},{name:"brandName",eventType:"input",node:getElem("pd-brand-name")},{name:"buyerMotive",eventType:"input",node:getElem("pd-buyer-motive")},{name:"keyFeatures",eventType:"input",node:getElem("pd-key-features")},{name:"keyBenefits",eventType:"input",node:getElem("pd-key-benefits")},{name:"tone",eventType:"input",node:getElem("pd-tone")},{name:"wordCount",eventType:"input",node:getElem("pd-word-count")},{name:"offer",eventType:"change",node:getElem("pd-offer")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},landingPageCopy=()=>{const n=getElem("lpc-generate-response"),a=getElem("lpc-prompt-text"),r=(a.innerHTML="",{brandName:e=>"Come up with some engaging and compelling landing page copy for my brand, "+e,productName:e=>` The product I am promoting is ${e}.`,contentPromoting:e=>` The content I am promoting is ${e}.`,pageTitle:e=>` The title of the page is ${e}.`,wordCount:e=>" My desired word count is "+e,cta:e=>` The desired call-to-action is ${e}.`,keyFeatures:e=>" ",keyBenefits:e=>" ",offer:e=>"",tone:e=>"",buyerMotive:e=>""}),d={brandName:{value:"",required:!0},productName:{value:"",required:!1},contentPromoting:{value:"",required:!1},pageTitle:{value:"",required:!1},wordCount:{value:"",required:!1},cta:{value:"",required:!1},keyFeatures:{value:"",required:!1},keyBenefits:{value:"",required:!1},buyerMotive:{value:"",required:!1},offer:{value:"",required:!1},tone:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("lpc-brand-name")},{name:"productName",eventType:"input",node:getElem("lpc-product-name")},{name:"contentPromoting",eventType:"input",node:getElem("lpc-content-promoting")},{name:"pageTitle",eventType:"input",node:getElem("lpc-page-title")},{name:"wordCount",eventType:"input",node:getElem("lpc-word-count")},{name:"cta",eventType:"change",node:getElem("lpc-cta")},{name:"keyFeatures",eventType:"input",node:getElem("lpc-key-features")},{name:"keyBenefits",eventType:"input",node:getElem("lpc-key-benefits")},{name:"buyerMotive",eventType:"change",node:getElem("lpc-buyer-motive")},{name:"offer",eventType:"change",node:getElem("lpc-offer")},{name:"tone",eventType:"change",node:getElem("lpc-tone")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},campaignStrategy=()=>{const n=getElem("cs-generate-response"),a=getElem("cs-prompt-text"),r=(a.innerHTML="",{campaignType:e=>` I’m launching a ${e} campaign for my ecommerce brand,`,brandName:e=>""+e,kpi:e=>`The main KPI we’re looking to optimize for is ${e}. `,platforms:e=>`, and the main platforms we’re looking to use are ${e}.`,productName:e=>` We’re specifically looking to drive sales for our ${e}.`}),d={campaignType:{value:"",required:!0},brandName:{value:"",required:!0},kpi:{value:"",required:!1},platforms:{value:"",required:!0},productName:{value:"",required:!1}};[{name:"campaignType",eventType:"change",node:getElem("cs-campaign-type")},{name:"brandName",eventType:"input",node:getElem("cs-brand-name")},{name:"kpi",eventType:"change",node:getElem("cs-kpi")},{name:"platforms",eventType:"change",node:getElem("cs-platforms")},{name:"productName",eventType:"input",node:getElem("cs-product-name")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d," Help me flesh out an intelligent plan to execute this campaign strategy.");e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d," Help me flesh out an intelligent plan to execute this campaign strategy."),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})},socialMediaCopy=()=>{const n=getElem("smc-generate-response"),a=getElem("smc-prompt-text"),r=(a.innerHTML="",{brandName:e=>`Craft some clear, compelling social media copy for my ecommerce brand, ${e}.`,platform:e=>` My goal is to maximize engagement on ${e}.`,productName:e=>` The product I’m promoting is ${e}.`,contentPromoting:e=>` The content I’m promoting is ${e}.`,buyerMotive:e=>` I’d like to appeal to the ${e} buyer motive.`,offer:e=>` The offer is a ${e} offer.`,tone:e=>` The tone should be ${e}.`,wordCount:e=>`  My desired word count is ${e}.`,cta:e=>` My desired call-to-action is ${e}.`}),d={brandName:{value:"",required:!0},platform:{value:"",required:!0},productName:{value:"",required:!1},contentPromoting:{value:"",required:!1},buyerMotive:{value:"",required:!1},offer:{value:"",required:!1},tone:{value:"",required:!1},wordCount:{value:"",required:!1},cta:{value:"",required:!1}};[{name:"brandName",eventType:"input",node:getElem("smc-brand-name")},{name:"platform",eventType:"change",node:getElem("smc-platform")},{name:"productName",eventType:"input",node:getElem("smc-product-name")},{name:"contentPromoting",eventType:"input",node:getElem("smc-content-promoting")},{name:"buyerMotive",eventType:"change",node:getElem("smc-buyer-motive")},{name:"offer",eventType:"change",node:getElem("smc-offer")},{name:"tone",eventType:"change",node:getElem("smc-tone")},{name:"wordCount",eventType:"input",node:getElem("smc-word-count")},{name:"cta",eventType:"input",node:getElem("smc-cta")}].forEach(e=>{const{name:t,eventType:n,node:o}=e;o.addEventListener(n,e=>{d[t].value=e.target.value;e=generatePrompt(r,d);e?setPromptText(a,e):setPromptText(a,"")})}),n.addEventListener("click",async e=>{var t;lastClickedButton=n,setTriggerButtonAttribute(n),shouldGeneratePrompt(d)&&(gptResponseNode.innerHTML="",hasAlreadySubmittedForm()?(showAndScrollToElement(gptResponseWrapper),gptResponseNode.innerHTML="Loading... Please Wait",t=generatePrompt(r,d),t=await makeRequestToChatGPT(t),gptResponseNode.innerHTML="",gptResponseNode.appendChild(t)):formPopup.style.display="flex")})};SEOMetaTitle(),adCopy(),blogCopy(),blogOutline(),seoMetaDescription(),emailSubjectLine(),emailCopy(),smsCopy(),productDescription(),landingPageCopy(),campaignStrategy(),socialMediaCopy();